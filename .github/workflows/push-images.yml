name: Push Images

env:
  REGISTRY: ghcr.io
  IMAGE_BASE_NAME: "${{ github.repository }}"
  IMAGE_FULL_NAME: "ghcr.io/${{ github.repository }}"
  MANDREL_IMAGE: "quay.io/quarkus/ubi-quarkus-mandrel-builder-image"
  MANDREL_VERSION: "23.1.4.0-Final"
  LATEST_IMAGE_TAG: "latest"
  JAVA_VERSION: '21'

on:
  workflow_run:
    workflows:
      - "Build and test"
    branches:
      - main
    types:
      - completed
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

# Only process one workflow run at a time
concurrency:
  group: "workflow = ${{ github.workflow }}}"
  cancel-in-progress: false

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      run: ${{ steps.conditional.outputs.run }}
    steps:
      - name: Conditional job
        id: conditional
        run: |
            echo "repository: ${{ github.repository }}"
            echo "ref: ${{ github.ref }}"
            echo "event name: ${{ github.event_name }}"
            echo "workflow run event: ${{ github.event.workflow_run.event }}"
            echo "workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"

            echo "run=${{
              (github.repository == 'ullbergm/startpunkt' && (github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')) &&
              (github.event_name == 'push' || (github.event_name == 'workflow_run' && (github.event.workflow_run.event == 'push' || github.event.workflow_run.event == 'workflow_dispatch') && github.event.workflow_run.conclusion == 'success'))
            }}" >>$GITHUB_OUTPUT

  build-jvm-images:
    needs: init
    if: ${{ needs.init.outputs.run == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
    name: "Build JVM images (${{ matrix.arch}})"
    steps:
      - uses: actions/checkout@v4

      - name: üìù Extract Docker metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{env.IMAGE_FULL_NAME}}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
          flavor: |
            latest=false
            suffix=-jvm-${{ matrix.arch }},onlatest=true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
          cache: maven

      - name: Create env vars
        working-directory: .
        run: |
          echo "DOCKERFILE=Dockerfile.jvm" >> "$GITHUB_ENV"

      - name: Build app (${{ matrix.arch }})
        working-directory: .
        run: ./mvnw -B clean package -DskipTests -Dmaven.compiler.release=${{ env.JAVA_VERSION }} -Dquarkus.http.host=0.0.0.0

      - name: Set up QEMU
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Build JVM image (${{ matrix.arch }})
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          push: false
          load: true
          file: ./src/main/docker/${{ env.DOCKERFILE }}
          tags: ${{ steps.meta.outputs.tags }}

      - name: Save JVM Image (${{ matrix.arch }})
        uses: ishworkh/container-image-artifact-upload@v2.0.0
        with:
          image: "${{ steps.meta.outputs.tags }}"

  build-native-images:
    needs: init
    if: ${{ needs.init.outputs.run == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          # - arm64
    name: "Build Native images (${{ matrix.arch }})"
    steps:
      - uses: actions/checkout@v4

      - name: üìù Extract Docker metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{env.IMAGE_FULL_NAME}}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
          flavor: |
            latest=false
            suffix=-${{ matrix.arch }},onlatest=true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
          cache: maven

      - name: Create env vars
        working-directory: .
        run: |
          echo "DOCKERFILE=Dockerfile.native-micro" >> "$GITHUB_ENV"
          if [[ ${{ matrix.arch }} != 'arm64' ]]; then
            echo "MANDREL_IMAGE_TAG=-${{ matrix.arch }}" >> "$GITHUB_ENV"
          fi

      - name: Build native image (${{ matrix.arch }})
        working-directory: .
        run: |
          ./mvnw -B clean package -DskipTests -Pnative \
            -Dmaven.compiler.release=${{ env.JAVA_VERSION }} \
            -Dquarkus.http.host=0.0.0.0 \
            -Dquarkus.native.container-build=true \
            -Dquarkus.native.builder-image=${{ env.MANDREL_IMAGE }}:${{ env.MANDREL_VERSION }}-java${{ env.JAVA_VERSION }}${{ env.MANDREL_IMAGE_TAG }} \
            -Dquarkus.container-image.build=true \
            -Dquarkus.container-image.push=false

      - name: Set up QEMU
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Build native image (${{ matrix.arch }})
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          push: false
          load: true
          file: ./src/main/docker/${{ env.DOCKERFILE }}
          tags: ${{ steps.meta.outputs.tags }}

      - name: Save native Image (${{ matrix.arch }})
        uses: ishworkh/container-image-artifact-upload@v2.0.0
        with:
          image: "${{ steps.meta.outputs.tags }}"

  push-images:
    needs:
      - build-jvm-images
      - build-native-images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
        kind:
          - "" # native
          - "-jvm"
    name: "Push app images (${{ matrix.arch }}${{ matrix.kind }})"
    steps:
      - uses: actions/checkout@v4
        if: (matrix.kind == '-jvm' || matrix.arch == 'amd64') # Process JVM and native amd64 images

      - name: üìù Extract Docker metadata
        if: (matrix.kind == '-jvm' || matrix.arch == 'amd64') # Process JVM and native amd64 images
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{env.IMAGE_FULL_NAME}}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
          flavor: |
            latest=false
            suffix=${{ matrix.kind }}-${{ matrix.arch }},onlatest=true

      - name: Get saved images (${{ matrix.kind }}${{ matrix.arch }})
        if: (matrix.kind == '-jvm' || matrix.arch == 'amd64') # Process JVM and native amd64 images
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: "${{ steps.meta.outputs.tags }}"

      - name: üîë Log into registry ${{ env.REGISTRY }}
        if: (matrix.kind == '-jvm' || matrix.arch == 'amd64') # Process JVM and native amd64 images
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push images
        if: (matrix.kind == '-jvm' || matrix.arch == 'amd64') # Process JVM and native amd64 images
        working-directory: .
        run: "docker push -a ${{ env.IMAGE_FULL_NAME }}"

  create-multiarch-jvm-tags:
    needs: push-images
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.json.outputs.tags }}
    name: Create multiarch JVM manifests
    steps:
      - uses: actions/checkout@v4

      - name: üìù Extract Docker metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{env.IMAGE_FULL_NAME}}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          flavor: |
            latest=auto
            suffix=-jvm,onlatest=true
      
      - name: Convert a list of tags to a JSON array
        id: json
        run: echo tags=$(echo '${{ steps.meta.outputs.tags }}' | jq -nRc '[inputs]' | jq -R -s '.') >> $GITHUB_OUTPUT

  create-multiarch-native-tags:
    needs: push-images
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.json.outputs.tags }}
    name: Create multiarch manifests
    steps:
      - uses: actions/checkout@v4

      - name: üìù Extract Docker metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{env.IMAGE_FULL_NAME}}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          flavor: |
            latest=auto
      
      - name: Convert a list of tags to a JSON array
        id: json
        run: echo tags=$(echo '${{ steps.meta.outputs.tags }}' | jq -nRc '[inputs]' | jq -R -s '.') >> $GITHUB_OUTPUT

  create-multiarch-jvm-manifests:
    needs: create-multiarch-jvm-tags
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag: ${{ fromJson(fromJson(needs.create-multiarch-jvm-tags.outputs.tags)) }}          
    name: Create multiarch JVM manifests (${{ matrix.tag }})
    steps:
      - uses: actions/checkout@v4

      - name: üìù Extract Docker metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{env.IMAGE_FULL_NAME}}

      - name: üîë Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if it is a tag build
        run: echo "TAG=${{ matrix.tag }}" >> $GITHUB_ENV

      - name: Check if it is a tag build
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "TAG=${{ env.IMAGE_FULL_NAME }}:${GITHUB_REF##refs/tags/v}-jvm" >> $GITHUB_ENV

      - name: Create and push multi-arch JVM manifests (${{ matrix.tag }})
        shell: bash
        run: |
          docker manifest create ${{ matrix.tag }} \
            -a ${{ env.TAG }}-amd64 \
            -a ${{ env.TAG }}-arm64
          docker manifest push ${{ matrix.tag }}

  create-multiarch-native-manifests:
    needs: create-multiarch-native-tags
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag: ${{ fromJson(fromJson(needs.create-multiarch-native-tags.outputs.tags)) }}
    name: Create multiarch native manifests (${{ matrix.tag }})
    steps:
      - uses: actions/checkout@v4

      - name: üìù Extract Docker metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{env.IMAGE_FULL_NAME}}

      - name: üîë Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if it is a tag build
        run: echo "TAG=${{ matrix.tag }}" >> $GITHUB_ENV

      - name: Check if it is a tag build
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "TAG=${{ env.IMAGE_FULL_NAME }}:${GITHUB_REF##refs/tags/v}-jvm" >> $GITHUB_ENV

      - name: Create and push multi-arch native manifests (${{ matrix.tag }})
        shell: bash
        run: |
          docker manifest create ${{ matrix.tag }} \
            -a ${{ env.TAG }}-amd64
          docker manifest push ${{ matrix.tag }}

  # cleanup-artifacts:
  #   needs:
  #     - create-multiarch-jvm-manifests
  #     - create-multiarch-native-manifests
  #   if: always()
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Delete Untagged Images
  #       uses: dataaxiom/ghcr-cleanup-action@v1
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}